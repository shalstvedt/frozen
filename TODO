- terminology change:
  - backend chain -> assembly line
  - backend -> machine
  - data -> store

* flow-based architecture for backend, request-based architecture for data:
  - backend/rebuild: enum proc not flow-based (normal, rewrite code to use ACTION_ENUM)
  - cache/cache: get backend length not flow-based (not important, subject for deprecation)
  - backend/pool: pool get parameter not flow-based (not important for now, another approach?)

* m4 macro collection
  - write m4 macro for balancer backend

- broken mphf backend rebuild: allocator backend not used in chain, coz structs unable to talk with FAST api. Need some api/switch, now!
- index/fill query store api, not machine
- replace index/lookup with machine/call_func

- join physical and logical length into one
- backend 'data/buffer'

- review indexes and caches (+ data free routines)
- data 'refcount_t'
- data 'timerange_t'

- fix broken slice_t hash_dump's
- rewrite file to use fd_t

- action definitions via m4 and documentation
- move downgrade request to api.c
- rewrite downgrade request to use m4'ed definitions
- write upgrade request
- backend 'api/switch' or something

- review code for multi-threading support, document backend's thread-safety capabilities
- backend thread_pool
- backend multi_request

- new test suite, as benchmarks, deprecate check
- data 'range_t', 'multiselect_t' and matching routines
- backend queue
- data 'action_t' + convert array from\to string
- mphf nelements_step with percents + remove from mphf to another backend

- change alloca to threaddata

- pcre
- libev

- delete ACTION_MOVE
- remove insert sort and write binary search instead
