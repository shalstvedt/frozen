{ class => "daemon/thread" },
{ class => "emitter", request = { machine = (machine_t)"mphf", request = { benchmark_function = "restart" } } },
{ class => "emitter", request = { machine = (machine_t)"mphf",
	request = {
		action => (action_t)"write",
		key    => "moo",
		buffer => (raw_t){ length = (uint_t)"0" }
	}
} },
{ class => "emitter", request = { machine = (machine_t)"mphf",
	request = {
		action => (action_t)"read",
		key    => "moo",
		buffer => (raw_t){ length = (uint_t)"0" }
	}
}, count => (uint_t)'500000' },
{ class => "emitter", request = { machine = (machine_t)"mphf", request = { benchmark_function = "print_long" } } },
{ class => "kill" },
NULL,
{ class => "benchmark", name => "mphf" },

{ class = "assign", before = { offset = (uint_t)"0" } },
{ class = "hash/murmur2_64", input = (hashkey_t)'key', output = (hashkey_t)'keyid' },
{
	class = "request/switch",
	data  = (named_t){
		name = "mphf_data",
		data = (file_t){ filename = "data_bench_mphf_data.dat" }
	},
	rules = {
		{
			request = { action = (action_t)"read" },
			machine = (machine_t){
				{ class = "shop/pass", shop = (machine_t)"mphf_index" },
				
				{ class = "data/query", data = (named_t)"mphf_data" },
				{
					class = "struct_unpack",
					structure = {
						keyid = { default = (uint64_t)'0' }
					}
				},
				{ class = "end" }
			}
		},
		{
			request = { action = (action_t)"write" },
			machine = (machine_t){
				{
					class = "struct_pack",
					structure = {
						keyid = { default = (uint64_t)'0' }
					}
				},
				{ class = "data/query", data = (named_t)"mphf_data" },
				
				{ class = "shop/pass",  shop = (machine_t)"mphf_index" },
				{ class = "end" }
			}
		}
	}
},
{ class = "end" },

NULL,
{
	name = "mphf_index",
	class = "mphf",
	type  = "chm_imp",
	value_size = (uint_t)"4",
	nelements_min  = (uint64_t)'1000',
	nelements_step = (uint64_t)'100',
	data_g = (file_t){ filename = "data_bench_mphf_g.dat" },
	data_e = (file_t){ filename = "data_bench_mphf_v.dat" },
	data_v = (file_t){ filename = "data_bench_mphf_e.dat" },
	input  = (hashkey_t)"keyid",
	output = (hashkey_t)"offset"
},
{ class = "shop/return" }
