{ class=> "daemon/thread", loop = (uint_t)'1', ignore_errors = (uint_t)'1' },
{ class=> "io/tcp", addr = "0.0.0.0", port = (uint_t)'12346', machine = {
	{ class=>"daemon/thread", loop = (uint_t)'1' },
	{ class=>"data/transfer",
		source => {
			{ class=>"io/tcp_child" }
		},
		destination => {
			// here we get clean data from tcp socket
			
			{ class=>"regexp", regexp = "([a-zA-Z]+) ([a-z0-9_]+) (.+)", extended = (uint_t)'1', capture = {
				global    = (void_t)'',
				function  = (void_t)'',
				key       = (void_t)'',
				value     = (void_t)''
			}},

			// here we have request with { marker = (uint_t)'1' } and captures on matching request 
			
			{ class=>"switch", rules = {
				// set command rule
				{ request = { marker = (uint_t)'1', function = "set" }, machine = {
					{ class=>"request/assign", before = { buffer = (string_t)"set this thing!\n" } },   // redefine buffer to reply 
					{ class=>"io/tcp_child" }                                                           // write new buffer to child socket
				}},

				// get command rule
				{ request = { marker = (uint_t)'1', function = "get" }, machine = {
					{ class=>"request/assign", before = { buffer = (string_t)"get this thing!\n" } },
					{ class=>"io/tcp_child" }
				}},

				// pack command rule
				{ request = { marker = (uint_t)'1', function = "pack" }, machine = {
					{ class=>"request/assign", before = { buffer = (string_t)"pack this thing!\n" } },
					{ class=>"io/tcp_child" }
				}}
			}},

			// all not matched requests go here
			{ class=>"request/assign", before = { buffer = (string_t)"unknown command\n" } },
			{ class=>"io/tcp_child" }
		}
	}
}
}
