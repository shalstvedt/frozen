* flow-based architecture for machine, request-based architecture for data:
  - machine/rebuild: enum proc not flow-based (normal, rewrite code to use ACTION_ENUM)
  - machine/pool: pool get parameter not flow-based (not important for now, another approach?)

* m4 macro collection
  - write m4 macro for balancer machine
  - index + file_t as store macro set

- raw_t constant parameter - do convert_from as compare with existing data and emit error on mismatch
- data_t use new packing datatype as primary method
- hash_t, list_t use data_t to pack data, remove refs stripping
- zmq device machine
- pcre_t compare func
- machine 'exec'
- machine/rebuild deprecate?
- portable action_t packed format
- machine rate-limit, delay
- benchmark functions remove from main request flow, need new approach for machine parameters, for machine/pool too
- slider_t set position func
- netstring_t parse (get code from mongrel for parsing)
- rewrite mongrel send\parse routines to use netstring_t, container_t types
- cache, append only cache
- rewrite debug dump funcs, data_dump
- zmq patterns
  - proxy pattern
  - replace machines and stuff in request with proxy

- write allocator_fixed_t push/pop same as for list_t
- broken tcp

- rewrite file_t to use fd_t

- document data packing abillity: uint_t, list_t, hash_t is packable, container_t depend on data in it, raw_t not packable
- review code for multi-threading support, document machine's thread-safety capabilities
- machine thread_pool
- data perthread_t wrapper
- data queue_t
- machine multi_request
  - action BATCH

- data 'range_t'

- libev
- co-routines
- error backtrace

- actions documentation
